// <auto-generated />
using System;
using CourseTech.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseTech.DAL.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    partial class CourseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseTech.Domain.Entities.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LectureMarkup")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.LessonRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<float>("Mark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonRecord");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.OpenQuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpenQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OpenQuestionId");

                    b.ToTable("OpenQuestionAnswer");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QueryWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PracticalQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("PracticalQuestionId");

                    b.ToTable("QueryWord");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("DisplayQuestion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Question", t =>
                        {
                            t.HasCheckConstraint("CK_Question_Number", "Number BETWEEN 0 AND 100");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Moderator"
                        });
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.TestVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TestQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VariantNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.HasIndex("VariantNumber")
                        .IsUnique();

                    b.ToTable("TestVariant");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9245fe4a-d402-451c-b9ed-9c1a04247482"),
                            CreatedAt = new DateTime(2024, 9, 18, 13, 14, 23, 315, DateTimeKind.Utc).AddTicks(2723),
                            Login = "MainAdmin",
                            Password = "------------------------------------------"
                        },
                        new
                        {
                            Id = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7"),
                            CreatedAt = new DateTime(2024, 9, 18, 13, 14, 23, 315, DateTimeKind.Utc).AddTicks(2729),
                            Login = "Maximkaboss25",
                            Password = "------------------------------------------"
                        },
                        new
                        {
                            Id = new Guid("0f8fad5b-d9cb-469f-a165-70867728950e"),
                            CreatedAt = new DateTime(2024, 9, 18, 13, 14, 23, 315, DateTimeKind.Utc).AddTicks(2732),
                            Login = "Sasha_student002",
                            Password = "------------------------------------------"
                        });
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Analys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CountOfReviews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("CurrentGrade")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEditAble")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsExamCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("LessonsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Age = (byte)0,
                            CountOfReviews = (byte)0,
                            CreatedAt = new DateTime(2024, 9, 18, 13, 14, 23, 317, DateTimeKind.Utc).AddTicks(7453),
                            CurrentGrade = 0f,
                            DateOfBirth = new DateTime(2002, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditAble = false,
                            IsExamCompleted = false,
                            LessonsCompleted = 0,
                            Name = "Админ",
                            Surname = "Админов",
                            UserId = new Guid("9245fe4a-d402-451c-b9ed-9c1a04247482")
                        },
                        new
                        {
                            Id = 2L,
                            Age = (byte)0,
                            CountOfReviews = (byte)0,
                            CreatedAt = new DateTime(2024, 9, 18, 13, 14, 23, 317, DateTimeKind.Utc).AddTicks(7459),
                            CurrentGrade = 0f,
                            DateOfBirth = new DateTime(2006, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditAble = false,
                            IsExamCompleted = false,
                            LessonsCompleted = 0,
                            Name = "Максим",
                            Surname = "Максимов",
                            UserId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7")
                        },
                        new
                        {
                            Id = 3L,
                            Age = (byte)0,
                            CountOfReviews = (byte)0,
                            CreatedAt = new DateTime(2024, 9, 18, 13, 14, 23, 317, DateTimeKind.Utc).AddTicks(7463),
                            CurrentGrade = 0f,
                            DateOfBirth = new DateTime(1980, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsEditAble = false,
                            IsExamCompleted = false,
                            LessonsCompleted = 0,
                            Name = "Александра",
                            Surname = "Александрова",
                            UserId = new Guid("0f8fad5b-d9cb-469f-a165-70867728950e")
                        });
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleId = 2L,
                            UserId = new Guid("9245fe4a-d402-451c-b9ed-9c1a04247482")
                        },
                        new
                        {
                            RoleId = 1L,
                            UserId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7")
                        },
                        new
                        {
                            RoleId = 3L,
                            UserId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7")
                        },
                        new
                        {
                            RoleId = 1L,
                            UserId = new Guid("0f8fad5b-d9cb-469f-a165-70867728950e")
                        });
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserToken");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            RefreshToken = "jbodfiujbINOIU3O4$",
                            RefreshTokenExpireTime = new DateTime(2024, 9, 25, 13, 14, 23, 318, DateTimeKind.Utc).AddTicks(5108),
                            UserId = new Guid("9245fe4a-d402-451c-b9ed-9c1a04247482")
                        },
                        new
                        {
                            Id = 2L,
                            RefreshToken = "hgiroej[giertjivfs",
                            RefreshTokenExpireTime = new DateTime(2024, 9, 25, 13, 14, 23, 318, DateTimeKind.Utc).AddTicks(5120),
                            UserId = new Guid("7c9e6679-7425-40de-944b-e07fc1f90ae7")
                        },
                        new
                        {
                            Id = 3L,
                            RefreshToken = "reatbyt42t423hgerf",
                            RefreshTokenExpireTime = new DateTime(2024, 9, 25, 13, 14, 23, 318, DateTimeKind.Utc).AddTicks(5123),
                            UserId = new Guid("0f8fad5b-d9cb-469f-a165-70867728950e")
                        });
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.OpenQuestion", b =>
                {
                    b.HasBaseType("CourseTech.Domain.Entities.QuestionEntities.Question");

                    b.Property<string>("Notation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Number", "Number BETWEEN 0 AND 100");
                        });

                    b.HasDiscriminator().HasValue("OpenQuestion");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.PracticalQuestion", b =>
                {
                    b.HasBaseType("CourseTech.Domain.Entities.QuestionEntities.Question");

                    b.Property<string>("CorrectQueryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Number", "Number BETWEEN 0 AND 100");
                        });

                    b.HasDiscriminator().HasValue("PracticalQuestion");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.TestQuestion", b =>
                {
                    b.HasBaseType("CourseTech.Domain.Entities.QuestionEntities.Question");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Question_Number", "Number BETWEEN 0 AND 100");
                        });

                    b.HasDiscriminator().HasValue("TestQuestion");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.LessonRecord", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonRecords")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseTech.Domain.Entities.User", "User")
                        .WithMany("LessonRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.OpenQuestionAnswer", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.OpenQuestion", "OpenQuestion")
                        .WithMany("AnswerVariants")
                        .HasForeignKey("OpenQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenQuestion");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QueryWord", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.Keyword", "Keyword")
                        .WithMany("QueryWords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.PracticalQuestion", "PracticalQuestion")
                        .WithMany("QueryWords")
                        .HasForeignKey("PracticalQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("PracticalQuestion");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.Question", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.Review", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.TestVariant", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.TestQuestion", "TestQuestion")
                        .WithMany("TestVariants")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("CourseTech.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseTech.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("CourseTech.Domain.Entities.User", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("CourseTech.Domain.Entities.UserToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.Keyword", b =>
                {
                    b.Navigation("QueryWords");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("LessonRecords");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.User", b =>
                {
                    b.Navigation("LessonRecords");

                    b.Navigation("Reviews");

                    b.Navigation("UserProfile");

                    b.Navigation("UserToken");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.OpenQuestion", b =>
                {
                    b.Navigation("AnswerVariants");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.PracticalQuestion", b =>
                {
                    b.Navigation("QueryWords");
                });

            modelBuilder.Entity("CourseTech.Domain.Entities.QuestionEntities.QuestionTypesEntities.TestQuestion", b =>
                {
                    b.Navigation("TestVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
